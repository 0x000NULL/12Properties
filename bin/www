#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config();
const app = require('../app');
const debug = require('debug')('12properties:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
const httpPort = normalizePort(process.env.HTTP_PORT || '80');
const httpsPort = normalizePort(process.env.HTTPS_PORT || '443');
app.set('port', httpsPort);

/**
 * Add detailed logging
 */
const logServerInfo = (type, port) => {
  console.log(`\n${type} Server Configuration:`);
  console.log(`Port: ${port}`);
  console.log(`Environment: ${process.env.NODE_ENV}`);
  if (type === 'HTTPS') {
    console.log(`SSL Key Path: ${process.env.SSL_KEY_PATH}`);
    console.log(`SSL Cert Path: ${process.env.SSL_CERT_PATH}`);
  }
};

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    console.error(`Invalid port value: ${val}`);
    process.exit(1);
  }
  if (port <= 0) {
    console.error(`Port must be > 0, got: ${port}`);
    process.exit(1);
  }
  return port;
}

/**
 * Create HTTP and HTTPS servers.
 */
const httpServer = http.createServer((req, res) => {
  console.log(`\nIncoming HTTP request: ${req.method} ${req.url}`);
  if (process.env.NODE_ENV === 'production') {
    const host = req.headers.host?.split(':')[0] || req.headers.host;
    const httpsUrl = `https://${host}${req.url}`;
    console.log(`Redirecting to: ${httpsUrl}`);
    res.writeHead(301, { Location: httpsUrl });
    res.end();
  } else {
    app(req, res);
  }
});

// Enhanced HTTPS server configuration
let httpsServer;
if (process.env.NODE_ENV === 'production') {
  try {
    console.log('\nInitializing HTTPS server...');
    
    const httpsOptions = {
      key: fs.readFileSync(process.env.SSL_KEY_PATH),
      cert: fs.readFileSync(process.env.SSL_CERT_PATH),
      ca: fs.readFileSync(process.env.SSL_CHAIN_PATH),
      minVersion: 'TLSv1.2',
      ciphers: [
        'ECDHE-ECDSA-AES128-GCM-SHA256',
        'ECDHE-RSA-AES128-GCM-SHA256',
        'ECDHE-ECDSA-AES256-GCM-SHA384',
        'ECDHE-RSA-AES256-GCM-SHA384',
      ].join(':'),
      honorCipherOrder: true
    };
    
    httpsServer = https.createServer(httpsOptions, app);
  } catch (error) {
    console.error('Failed to initialize HTTPS server:', error);
    process.exit(1);
  }
}

/**
 * Start servers with explicit error handling
 */
function startServer(server, port, type) {
  return new Promise((resolve, reject) => {
    server.on('error', (error) => {
      if (error.code === 'EACCES') {
        console.error(`${type} Server Error: Permission denied for port ${port}`);
        console.error('Try running with sudo or use setcap');
      } else if (error.code === 'EADDRINUSE') {
        console.error(`${type} Server Error: Port ${port} is already in use`);
        console.error('Check if another process is using the port');
      } else {
        console.error(`${type} Server Error:`, error);
      }
      reject(error);
    });

    server.listen(port, '0.0.0.0', () => {
      console.log(`\n${type} Server listening on port ${port}`);
      console.log('Bound to address: 0.0.0.0');
      console.log('Environment:', process.env.NODE_ENV);
      resolve();
    });
  });
}

/**
 * Start both servers
 */
async function startServers() {
  try {
    await startServer(httpServer, httpPort, 'HTTP');
    if (httpsServer) {
      await startServer(httpsServer, httpsPort, 'HTTPS');
    }
    console.log('\nAll servers started successfully');
  } catch (error) {
    console.error('Failed to start servers:', error);
    process.exit(1);
  }
}

/**
 * Initialize servers
 */
startServers();

/**
 * Add process handlers
 */
process.on('SIGTERM', () => {
  console.log('Received SIGTERM signal');
  httpServer.close(() => console.log('HTTP server closed'));
  if (httpsServer) {
    httpsServer.close(() => console.log('HTTPS server closed'));
  }
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */
function onError(serverType, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const port = serverType === 'HTTP' ? httpPort : httpsPort;
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP/HTTPS server "listening" event.
 */
function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Graceful shutdown function
 */
function gracefulShutdown() {
  debug('Received kill signal, shutting down gracefully');
  
  httpServer.close(() => {
    debug('HTTP server closed');
    if (httpsServer) {
      httpsServer.close(() => {
        debug('HTTPS server closed');
        process.exit(0);
      });
    } else {
      process.exit(0);
    }
  });

  // Force shutdown after 30 seconds
  setTimeout(() => {
    console.error('Could not close connections in time, forcefully shutting down');
    process.exit(1);
  }, 30000);
}
